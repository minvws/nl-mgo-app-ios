/*
 *  SPDX-FileCopyrightText: 2025 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *  SPDX-License-Identifier: EUPL-1.2
 */

import AuthorizationMiddleware
import Foundation
import OpenAPIRuntime
import OpenAPIURLSession

public protocol LocalisationServiceClientProtocol {
	
	/// Create a LocalisationServiceClient
	/// - Parameter serverUrl: the url for the service
	/// - Parameter username: authentication user name
	/// - Parameter password: authentication password
	init(serverUrl: Foundation.URL, username: String?, password: String?)
	
	/// Search for all the healthcare organizations with this city and name
	/// - Parameters:
	///   - city: the city to search with
	///   - name: the name to search with
	/// - Returns: An (empty) array of Healthcare Organizations
	func searchHealthcareOrganizations(city: String, name: String) async throws -> [MgoOrganization]
	
	/// Search for all the healthcare organizations for the demo
	/// - Parameters:
	/// - Returns: An (empty) array of Healthcare Organizations
	func searchDemoOrganizations() async throws -> [MgoOrganization]
}

public class LocalisationServiceClient: LocalisationServiceClientProtocol {
	
	/// Autogenerated api client with OpenAPI-generator
	private var client: Client
	
	/// Create a LocalisationServiceClient
	/// - Parameter serverUrl: the url for the service
	/// - Parameter username: authentication user name
	/// - Parameter password: authentication password
	required public init(serverUrl: Foundation.URL, username: String?, password: String?) {
		
		if let username, let password {
			let authenticationMiddleWare = AuthorizationMiddleware(
				username: username,
				password: password
			)
			self.client = Client(
				serverURL: serverUrl,
				transport: URLSessionTransport(),
				middlewares: [authenticationMiddleWare]
			)
		} else {
			self.client = Client(
				serverURL: serverUrl,
				transport: URLSessionTransport()
			)
		}
	}
	
	/// Search for all the healthcare organizations with this city and name
	/// - Parameters:
	///   - city: the city to search with
	///   - name: the name to search with
	/// - Returns: An (empty) array of Healthcare Organizations
	public func searchHealthcareOrganizations(city: String, name: String) async throws -> [MgoOrganization] {
		
		let searchRequest = Components.Schemas.SearchRequest(name: name, city: city)
		let input = Operations.read_item_localization_organization_search_post.Input(body: .json(searchRequest))
		let response = try await client.read_item_localization_organization_search_post(input)
		let organizations = try response.ok.body.json.organizations
		return organizations
	}
	
	/// Search for all the healthcare organizations for the demo
	/// - Parameters:
	/// - Returns: An (empty) array of Healthcare Organizations
	public func searchDemoOrganizations() async throws -> [MgoOrganization] {
		
		let response = try await client.demo_healthcare_providers_localization_organization_search_demo_post()
		let organizations = try response.ok.body.json.organizations
		return organizations
	}
	
}
