/*
 *  SPDX-FileCopyrightText: 2025 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *  SPDX-License-Identifier: EUPL-1.2
 */

import AuthorizationMiddleware
import OpenAPIRuntime
import OpenAPIURLSession
import Foundation

public protocol RemoteAuthenticationClientProtocol {
	
	/// Create a Remote Authentication Client
	/// - Parameter serverUrl: the url for the service
	/// - Parameter username: authentication user name
	/// - Parameter password: authentication password
	init(serverUrl: Foundation.URL, username: String?, password: String?)
	
	/// Get the authentication url
	/// - Parameter callbackUrl: the callback url to redirect to
	/// - Returns: authentication url
	func getAuthenticationUrl(callbackUrl: String) async throws -> URL
}

public class RemoteAuthenticationClient: RemoteAuthenticationClientProtocol {
	
	/// Autogenerated api client with OpenAPI-generator
	private var client: Client
	
	/// Create a Remote Authentication Client
	/// - Parameter serverUrl: the url for the service
	/// - Parameter username: authentication user name
	/// - Parameter password: authentication password
	required public init(serverUrl: Foundation.URL, username: String?, password: String?) {
		
		if let username, let password {
			let authenticationMiddleWare = AuthorizationMiddleware(
				username: username,
				password: password
			)
			self.client = Client(
				serverURL: serverUrl,
				transport: URLSessionTransport(),
				middlewares: [authenticationMiddleWare]
			)
		} else {
			self.client = Client(
				serverURL: serverUrl,
				transport: URLSessionTransport()
			)
		}
	}
	
	/// Get the authentication url
	/// - Parameter callbackUrl: the callback url to redirect to
	/// - Returns: authentication url
	public func getAuthenticationUrl(callbackUrl: String) async throws -> URL {
		
		let request = Components.Schemas.StartRequest(client_callback_url: callbackUrl)
		let input = Operations.oidc_start_post.Input(body: .json(request))
		let response = try await client.oidc_start_post(input)
		
		let dictionary = try response.ok.body.json.value as? [String: String]
		if let authorizationUrlString = dictionary?.first?.value,
			let url = URL(string: authorizationUrlString) {
			return url
		}
		throw RemoteAuthenticationError.noAuthenticationUrl
	}
}
