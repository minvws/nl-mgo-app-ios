# Defines the Xcode Project, which can be generated by running `make generate_project`
# Specification: https://github.com/yonaskolb/XcodeGen/blob/master/Docs/ProjectSpec.md

name: MGO

# - Packages:

packages:
  AuthorizationMiddleware:
    path: ./Packages/AuthorizationMiddleware
  CopyImport:
    path: ./Packages/CopyImport
  FHIRClient:
    path: ./Packages/FHIRClient
  FeatureFlag:
    path: ./Packages/FeatureFlag
  FileStorage:
    path: ./Packages/FileStorage
  GitHubArtifactDownload:
    path: ./Packages/GitHubArtifactDownload
  JailBreakDetector:
    path: ./Packages/JailBreakDetector
  LocalAuthenticationProvider:
    path: ./Packages/LocalAuthenticationProvider
  LocalisationService:
    path: ./Packages/LocalisationService
  MGODebug:
    path: ./Packages/MGODebug
  MGOFoundation:
    path: ./Packages/MGOFoundation
  MGORepository:
    path: ./Packages/MGORepository
  MGOTest:
    path: ./Packages/MGOTest
  MGOUI:
    path: ./Packages/MGOUI
  NotificationCenter:
    path: ./Packages/NotificationCenter
  Observatory:
    path: ./Packages/Observatory
  RemoteAuthentication:
    path: ./Packages/RemoteAuthentication
  RemoteConfiguration:
    path: ./Packages/RemoteConfiguration
  RestrictedBrowser:
    path: ./Packages/RestrictedBrowser
  ReusableUI:
    path: ./Packages/ReusableUI
  RijksoverheidFont:
    path: ./Packages/RijksoverheidFont
  Sanitizer:
    path: ./Packages/Sanitizer
  SecureUserSettings:
    path: ./Packages/SecureUserSettings
  SharedCore:
    path: ./Packages/SharedCore
  Theme:
    path: ./Packages/Theme
# - Attributes:

attributes:
  LastUpgradeCheck: "1500"

# - Configurations:

configs:
  Development: debug
  FirebaseAcceptance: release
  FirebaseDemo: release
  FirebaseTest: release
  FirebaseProduction: release # should be identical to AppStore build.
  AppStore: release

fileGroups:
  - project.yml
  - sonar-project.properties
  - .github
  - fastlane
  - Diagrams
  - Scripts
  - Makefile
  - README.md

# - Project Level settings:

options:
  developmentLanguage: nl

settings:
  base:
    IPHONEOS_DEPLOYMENT_TARGET: 15.0
    SWIFT_VERSION: 5.0
    VERSIONING_SYSTEM: apple-generic
    CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED: YES
    ASSETCATALOG_COMPILER_GENERATE_ASSET_SYMBOLS: true
    ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS: true
    SWIFT_STRICT_CONCURRENCY: targeted
    FRAMEWORK_SEARCH_PATHS:
      - "$(inherited)"
      - "$(PROJECT_DIR)"
    LD_RUNPATH_SEARCH_PATHS:
      - "$(inherited)"
      - "@executable_path/Frameworks"

# - Target Templates (i.e. shared default settings for targets):

targetTemplates:

  Standard_BaseSettings:
    info:
      properties:
        # Dynamic properties (APP_FLAVOR etc) here are set at build time, so can still vary based on a Configuration.
        NETWORK_CONFIGURATION: $(NETWORK_CONFIGURATION)
        LOG_LEVEL: ${LOG_LEVEL}
    settings:
      base:
        VALIDATE_PRODUCT: YES
        DEBUG_INFORMATION_FORMAT: dwarf-with-dsym # Firebase warns that this must be set for all targets.
        ENABLE_BITCODE: false # because it's deprecated
        ENABLE_USER_SCRIPT_SANDBOXING: false
      configs:
        Development:
          NETWORK_CONFIGURATION: DEV
          VALIDATE_PRODUCT: NO
          LOG_LEVEL: debug
          DEEPLINK_SCHEMA: mgo-dev
        FirebaseAcceptance:
          NETWORK_CONFIGURATION: ACC
          LOG_LEVEL: error
          SWIFT_OPTIMIZE_OBJECT_LIFETIME: true
          DEEPLINK_SCHEMA: mgo-acc
        FirebaseDemo:
          NETWORK_CONFIGURATION: DEMO
          LOG_LEVEL: error
          SWIFT_OPTIMIZE_OBJECT_LIFETIME: true
          DEEPLINK_SCHEMA: mgo-demo
        FirebaseTest:
          NETWORK_CONFIGURATION: TEST
          LOG_LEVEL: debug
          SWIFT_OPTIMIZE_OBJECT_LIFETIME: true
          DEEPLINK_SCHEMA: mgo-test
        FirebaseProduction:
          NETWORK_CONFIGURATION: Production
          LOG_LEVEL: error
          SWIFT_OPTIMIZE_OBJECT_LIFETIME: true
          DEEPLINK_SCHEMA: mgo
        AppStore:
          NETWORK_CONFIGURATION: Production
          LOG_LEVEL: error
          SWIFT_OPTIMIZE_OBJECT_LIFETIME: true
          DEEPLINK_SCHEMA: mgo

  Standard_Signing:
    settings:
      base:
        CODE_SIGN_STYLE: Manual
        CODE_SIGN_IDENTITY: iPhone Distribution
        DEVELOPMENT_TEAM: QMK879NYMV # Rool (waiting for MinVWS / iRealisatie)
      configs:
        Development:
          CODE_SIGN_IDENTITY: iPhone Developer
        FirebaseAcceptance:
        FirebaseDemo:
        FirebaseTest:
        FirebaseProduction:
        AppStore:
          DEVELOPMENT_TEAM: C2H38GV99H # Rijksoverheid
        
  Standard_iOS:
    platform: iOS
    type: application
    dependencies:
      - package: MGOFoundation
      - package: MGOUI
      - package: MGODebug
      - package: RestrictedBrowser
        embed: false
    settings:
      base:
        CURRENT_PROJECT_VERSION: 1 # needs to be present for project to build locally, but is overwritten by fastlane. No need to change.
        TARGETED_DEVICE_FAMILY: 1,2
        PRODUCT_NAME: $(TARGET_NAME)
        PRODUCT_MODULE_NAME: MGO
    info:
      properties:
        CFBundleDevelopmentRegion: nl_NL
        CFBundleExecutable: $(EXECUTABLE_NAME)
        CFBundleName: ${DISPLAY_NAME}
        CFBundlePackageType: $(PRODUCT_BUNDLE_PACKAGE_TYPE)
        CFBundleShortVersionString: $(MARKETING_VERSION)
        CFBundleVersion: $(CURRENT_PROJECT_VERSION)
        ITSAppUsesNonExemptEncryption: false
        LSApplicationQueriesSchemes:
          - 'tel'
          - 'activator'
          - 'cydia'
          - 'filza'
          - 'sileo'
          - 'undecimus'
          - 'zbra'
          - 'https' # used when safari is not the default browser
          - 'googlechromes'
          - 'opera-https'
          - 'firefox'
          - 'microsoft-edge-https'
          - 'itms-apps'
        LSRequiresIPhoneOS: true
        NSFaceIDUsageDescription: "Log volgende keer in met gezichtsherkenning."
        UIApplicationSupportsIndirectInputEvents: true
        UIRequiredDeviceCapabilities:
          - armv7
        UISupportedInterfaceOrientations:
          - UIInterfaceOrientationPortrait
          - UIInterfaceOrientationLandscapeLeft
          - UIInterfaceOrientationLandscapeRight
          - UIInterfaceOrientationPortraitUpsideDown
        UISupportedInterfaceOrientations~ipad:
          - UIInterfaceOrientationPortrait
          - UIInterfaceOrientationPortraitUpsideDown
          - UIInterfaceOrientationLandscapeLeft
          - UIInterfaceOrientationLandscapeRight
        UILaunchScreen:
          UIColorName: SplashColor
          UIImageName: SplashLogo

    preBuildScripts:
      - name: Run SwiftLint
        basedOnDependencyAnalysis: false
        script: |
          export PATH="$PATH:/opt/homebrew/bin" # for M1 macs

          if mint list | grep -q -i 'swiftlint'; then
            mint run swiftlint --quiet --config=./.swiftlint.yml
          else
            echo "warning: SwiftLint not found, run 'make dev' in the project root folder"
          fi

  Standard_UnitTesting:
    platform: iOS
    type: bundle.unit-test
    dependencies:
      - package: MGOTest
    settings:
      TEST_HOST: "$(BUILT_PRODUCTS_DIR)/MGO.app/MGO"

  Standard_UITesting:
    platform: iOS
    type: bundle.ui-testing
    dependencies:
      - target: MGO
      - package: MGOTest
    settings:
      base:
        GENERATE_INFOPLIST_FILE: YES

# - Targets

targets:
  MGO:
    # scheme:
    #   testTargets:
    templates:
      - Standard_iOS
      - Standard_Signing
      - Standard_BaseSettings
    sources:
      - path: Sources/MGO
        
    settings:
      base:
        # keep the comment on the next line, as it shows up in the CI logs & helps distinguish
        MARKETING_VERSION: 0.0.1
        ASSETCATALOG_COMPILER_APPICON_NAME: AppIcon
        INFOPLIST_FILE: Sources/MGO/Info.plist

      configs:
        Development:
          DISPLAY_NAME: "ðŸ¤– Dev MGO"
          PRODUCT_NAME: MGO
          PRODUCT_BUNDLE_IDENTIFIER: nl.rool.pifz.dev
          PROVISIONING_PROFILE_SPECIFIER: "MGO Dev"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Dev.entitlements
        FirebaseTest:
          DISPLAY_NAME: "ðŸ§ª Test MGO"
          PRODUCT_NAME: MGO Test
          PRODUCT_BUNDLE_IDENTIFIER: nl.rool.pifz.test
          PROVISIONING_PROFILE_SPECIFIER: "MGO Test"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Test.entitlements
        FirebaseAcceptance:
          DISPLAY_NAME: "ðŸ’¡ Acc MGO"
          PRODUCT_NAME: MGO ACC
          PRODUCT_BUNDLE_IDENTIFIER: nl.rool.pifz.acc
          PROVISIONING_PROFILE_SPECIFIER: "MGO Acc"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Acc.entitlements
        FirebaseDemo:
          DISPLAY_NAME: "MGO Demo"
          PRODUCT_NAME: MGO Demo
          PRODUCT_BUNDLE_IDENTIFIER: nl.rool.pifz.demo
          PROVISIONING_PROFILE_SPECIFIER: "MGO Demo"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Demo.entitlements
        FirebaseProduction:
          DISPLAY_NAME: "Mijn Gezondheidsoverzicht"
          PRODUCT_NAME: MGO PROD
          PRODUCT_BUNDLE_IDENTIFIER: nl.rool.pifz
          PROVISIONING_PROFILE_SPECIFIER: "MGO Prod"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Prod.entitlements
        AppStore:
          DISPLAY_NAME: "Mijn Gezondheidsoverzicht"
          PRODUCT_NAME: MGO
          PRODUCT_BUNDLE_IDENTIFIER: nl.rijksoverheid.pifz
          PROVISIONING_PROFILE_SPECIFIER: "nl.rijksoverheid.pifz: AppStore"
          CODE_SIGN_ENTITLEMENTS: Sources/MGO/Core/Entitlement/MGO-Prod.entitlements
    info:
      path: Sources/MGO/Info.plist
      properties:
        MGO_BASIC_AUTH_PASSWORD: ${MGO_BASIC_AUTH_PASSWORD}
        MGO_BASIC_AUTH_USERNAME: ${MGO_BASIC_AUTH_USERNAME}
        CFBundleURLTypes:
          - CFBundleTypeRole: Viewer
            CFBundleURLName: ${PRODUCT_BUNDLE_IDENTIFIER}
            CFBundleURLSchemes:
              - ${DEEPLINK_SCHEMA}

  MGOTests:
    templates:
      - Standard_UnitTesting
    sources:
      - path: MGOTests
        excludes:
          - "**/__Snapshots__"
          
  MGOUITests:
    templates:
      - Standard_UITesting
    sources:
      - path: MGOUITests

# - Scheme Templates

schemeTemplates:

  # Template for Development/Acc/Production/AppStore varieties
  ConfigScheme:
    build:
      config: ${configEnvironment} #not sure if needed.
      targets:
        ${appTargetName}: all
    test:
      config: ${configEnvironment}
    run:
      config: ${configEnvironment}
    profile:
      config: ${configEnvironment}
    analyze:
      config: ${configEnvironment}
    archive:
      config: ${configEnvironment}

  # Variant of the standard `ConfigScheme` for Development
  DevelopmentConfigScheme:
    templates:
      - ConfigScheme
    run:
      commandLineArguments:
        # Enable CoreData debug flags:
        # See: https://www.donnywals.com/using-launch-arguments-for-easier-core-data-debugging/
        # "-com.apple.CoreData.SQLDebug 2": YES # choose a level from 1-4
        # "-com.apple.CoreData.ConcurrencyDebug 1": YES # crash with stacktrace on concurrency mistakes
        # "-com.apple.CoreData.MigrationDebug 1": YES

  # Template for adding unit tests to a scheme:
  UnitTestScheme:
    test:
      commandLineArguments:
        "--unittesting": true
      language: nl
      region: NL

  # Template for adding UI tests to a scheme:
  UITestScheme:
    test:
      language: nl
      region: NL
      gatherCoverageData: true
      environmentVariables:
        MGO_BASIC_AUTH_PASSWORD: ${MGO_BASIC_AUTH_PASSWORD}
        MGO_BASIC_AUTH_USERNAME: ${MGO_BASIC_AUTH_USERNAME}
      targets:
        - name: ${uiTestTargetName}
#          parallelizable: true
          randomExecutionOrder: true

# - Schemes

schemes:
  MGO Dev:
    templates:
      - DevelopmentConfigScheme
      - UnitTestScheme # This scheme has unit tests
    templateAttributes:
      appTargetName: MGO
      configEnvironment: Development
    run:
      language: nl
    test:
      gatherCoverageData: true
      targets:
        - package: AuthorizationMiddleware/AuthorizationMiddlewareTests
          randomExecutionOrder: true
          parallelizable: false
        - package: FHIRClient/FHIRClientTests
          randomExecutionOrder: true
          parallelizable: false
        - package: FeatureFlag/FeatureFlagTests
          randomExecutionOrder: true
          parallelizable: false
        - package: FileStorage/FileStorageTests
          randomExecutionOrder: true
          parallelizable: false
        - package: JailBreakDetector/JailBreakDetectorTests
          randomExecutionOrder: true
          parallelizable: false
        - package: LocalisationService/LocalisationServiceTests
          randomExecutionOrder: true
          parallelizable: false
        - package: MGORepository/MGORepositoryTests
          randomExecutionOrder: true
          parallelizable: false
        - name: MGOTests
          parallelizable: false
          randomExecutionOrder: true
        - package: Observatory/ObservatoryTests
          randomExecutionOrder: true
          parallelizable: false
        - package: RemoteAuthentication/RemoteAuthenticationTests
          randomExecutionOrder: true
          parallelizable: false
        - package: RemoteConfiguration/RemoteConfigurationTests
          randomExecutionOrder: true
          parallelizable: false
        - package: RestrictedBrowser/RestrictedBrowserTests
          randomExecutionOrder: true
          parallelizable: false
        - package: ReusableUI/ReusableUITests
          randomExecutionOrder: true
          parallelizable: false
        - package: RijksoverheidFont/RijksoverheidFontTests
          randomExecutionOrder: true
          parallelizable: false
        - package: Theme/ThemeTests
          randomExecutionOrder: true
          parallelizable: false
        - package: Sanitizer/SanitizerTests
          randomExecutionOrder: true
          parallelizable: false
        - package: SecureUserSettings/SecureUserSettingsTests
          randomExecutionOrder: true
          parallelizable: false
        - package: SharedCore/SharedCoreTests
          randomExecutionOrder: true
          parallelizable: false

  MGO Acceptance:
    templates:
      - ConfigScheme
    templateAttributes:
      appTargetName: MGO
      configEnvironment: FirebaseAcceptance
      
  MGO Demo:
    templates:
      - ConfigScheme
    templateAttributes:
      appTargetName: MGO
      configEnvironment: FirebaseDemo
  
  MGO Test:
    templates:
      - ConfigScheme
    templateAttributes:
      appTargetName: MGO
      configEnvironment: FirebaseTest

  MGO Production:
    templates:
      - ConfigScheme
    templateAttributes:
      appTargetName: MGO
      configEnvironment: FirebaseProduction

  MGO AppStore:
    templates:
      - ConfigScheme
    templateAttributes:
      appTargetName: MGO
      configEnvironment: AppStore
      
  MGO UI Tests:
    templates:
      - DevelopmentConfigScheme
      - UITestScheme # This scheme has UI tests
    templateAttributes:
      appTargetName: MGO
      uiTestTargetName: MGOUITests
      configEnvironment: Development
    run:
      language: nl
